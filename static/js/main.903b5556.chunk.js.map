{"version":3,"sources":["D3_and_SVG/d3_1.jsx","D3_and_SVG/d3_svg.jsx","D3_and_SVG/d3_svg_data.jsx","D3_and_SVG/d3_svg_data_external.jsx","App.js","serviceWorker.js","index.js"],"names":["D3_1","className","width","height","x","y","fill","cx","cy","r","stroke","strokeWidth","x1","y1","x2","y2","d","Component","D3_SVG","svg","d3","append","attr","group","text","style","data","D3_SVG_data","useEffect","selectAll","i","n","enter","D3_SVG_data_external","then","console","log","circs","distance","radius","App","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.903b5556.chunk.js","sourcesContent":["/**\n * SVG basic building blocks\n */\n\nimport React, {Component} from 'react';\nimport '../App.css';\n\n\nclass D3_1 extends Component{\n\n    render(){\n        return(\n            <div className='App'>\n                <h2>SVG Shapes</h2>\n                <svg width=\"600\" height=\"350\">\n                    <rect x='250' y='40' fill='blue' width='100' height='200'></rect>\n                    <circle cx='200' cy='200' r='50' fill='pink' stroke='red' strokeWidth='3'></circle>\n                    <line x1='100' y1='100' x2='120' y2='220' stroke='grey' strokeWidth='3'></line>\n                    <path d=\"M150 50 L 75 200 L 225 200 C 225 200 150 150 150 50\" fill='orange'></path>\n                    <circle cx='150' cy='150' r='5' fill='grey'></circle>\n                    <line x1='225' y1='200' x2='150' y2='150' stroke='grey'></line>\n                </svg>\n            </div>\n        )\n    }\n}\n\nexport default D3_1;","/**\n * Using d3 to create svgs\n */\n\n\nimport React, {Component} from 'react';\nimport '../App.css';\nimport * as d3 from 'd3';\n\nclass D3_SVG extends Component{\n\n\n    componentDidMount(){\n        const canvas = d3.select(\".canvas\");\n        const svg = canvas.append('svg')\n            .attr('height', 325)\n            .attr('width', 600);\n\n        const group = svg.append('g')\n            .attr('transform', 'translate(0, 100)'); //translate to 100px below\n        //append shapes to svg container using group\n        group.append('rect')\n            .attr('width',200)\n            .attr('height',100)\n            .attr('fill','blue')\n            .attr('x',20)\n            .attr('y',20);\n        group.append('circle')\n            .attr('r',50)\n            .attr('cx',300)\n            .attr('cy', 70)\n            .attr('fill','pink');\n        group.append('line')\n            .attr('x1',370)\n            .attr('x2',400)\n            .attr('y1',20)\n            .attr('y2',120)\n            .attr('stroke','red');\n\n        svg.append('text')\n            .attr('x',20)\n            .attr('y',200)\n            .attr('fill','grey')\n            .text('Hello D3!')\n            .style('font-family','arial')\n        \n    }\n\n    render(){\n        // const a = document.querySelectorAll('div')\n        // const b = d3.selectAll('div')\n        // console.log(a,b)\n\n        // const canvas = d3.select(\".canvas\");\n        // console.log(canvas)\n        // const svg = canvas.append('svg');\n        \n\n        return(\n            <div className='App'>\n                <div className='canvas'>\n                <h2>SVG using D3</h2>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default D3_SVG;","/**\n * Using data in d3 svgs\n */\n\nimport React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport * as d3 from \"d3\";\n\nconst data = [\n  { width: 200, height: 100, fill: \"red\" },\n  { width: 100, height: 60, fill: \"purple\" },\n  { width: 50, height: 30, fill: \"yellow\" }\n];\n\nconst D3_SVG_data = () => {\n  useEffect(() => {\n    const svg = d3.select(\".data_svg\");\n    //adding attr to rect already in the DOM\n    const rects = svg\n      .selectAll(\"rect\")\n      .data(data)\n      .attr(\n        \"width\",\n        (d, i, n) => d.width //no need to have return statement\n      )\n      .attr(\"height\", d => d.height)\n      .attr(\"fill\", d => d.fill)\n      .attr(\"x\", 200);\n\n    //creating virtual rects according to data present\n    rects\n      .enter()\n      .append(\"rect\")\n      .attr(\n        \"width\",\n        (d, i, n) => d.width //no need to have return statement\n      )\n      .attr(\"height\", d => d.height)\n      .attr(\"fill\", d => d.fill)\n      .attr(\"x\", 200);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h2>Using Data with D3</h2>\n      <div className=\"canvas\">\n        <svg className=\"data_svg\" width=\"600\" height=\"200\">\n          <rect></rect>\n        </svg>\n      </div>\n    </div>\n  );\n};\n\nexport default D3_SVG_data;\n","/**\n * Using data in d3 svgs\n */\n\nimport React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport * as d3 from \"d3\";\n\nconst D3_SVG_data_external = () => {\n  useEffect(() => {\n    const svg = d3.select(\".data_svg_external\");\n    d3.json(\"./planets.json\").then(data => {\n      console.log(data);\n      const circs = svg.selectAll('circle')\n        .data(data)\n\n        //add attrs to circs already in the DOM\n      circs.attr('cy', 200)\n        .attr('cx', d => d.distance)\n        .attr('r', d => d.radius)\n        .attr('fill', d => d.fill)\n\n        //append enter selection to the DOM\n      circs.enter()\n        .append('circle')\n        .attr('cy', 200)\n        .attr('cx', d => d.distance)\n        .attr('r', d => d.radius)\n        .attr('fill', d => d.fill)\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h2>Using External JSON Data with D3</h2>\n      <div className=\"canvas\">\n        <svg className=\"data_svg_external\" width=\"600\" height=\"500\"></svg>\n      </div>\n    </div>\n  );\n};\n\nexport default D3_SVG_data_external;\n","import React from 'react';\nimport './App.css';\nimport D3_1 from './D3_and_SVG/d3_1';\nimport D3_SVG from './D3_and_SVG/d3_svg';\nimport D3_SVG_DATA from './D3_and_SVG/d3_svg_data';\nimport D3_SVG_DATA_EXTERNAL from './D3_and_SVG/d3_svg_data_external';\n\nclass App extends React.Component{\n  render(){\n    return(\n      <div className='App'>\n        <h1>D3 Visualizations</h1>\n        <D3_1 />\n        <D3_SVG />\n        <D3_SVG_DATA />\n        <D3_SVG_DATA_EXTERNAL />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}